In JavaScript, a string is a sequence of characters used to represent text. Strings are one of the most commonly used data types and are immutable (cannot be changed after creation). Here's a detailed overview:

1. Creating Strings
Strings can be created in several ways:

Using String Literals
Enclosed in:
Single quotes (')
Double quotes (")
Backticks (`) for template literals

Using the String Constructor
Creates a string object (not recommended for general use).
let objString = new String("Hello, world!");

2. String Characteristics
Immutable:
Strings cannot be changed once created. Any operation that alters a string creates a new string.
Zero-Based Indexing:
Characters in a string are indexed starting from 0.

3. Common String Methods
JavaScript provides many built-in methods for string manipulation:

Length
Get the length of a string:

Accessing Characters
Use bracket notation or charAt

Case Conversion
Convert to uppercase or lowercase

Searching and Extracting
Finding Substrings:
indexOf: Returns the index of the first occurrence of a substring.
lastIndexOf: Searches from the end

Checking for Substring:
includes: Returns true or false.
startsWith and endsWith

Extracting Substrings:
slice: Extracts part of a string.
substring: Similar to slice, but does not accept negative indices.
substr: Extracts a substring of a specified length (deprecated)

Manipulating Strings -
1.Concatenation:
Use + or concat
2.Replacing Content:
replace: Replaces the first match.
replaceAll: Replaces all matches.
3.Splitting:
Convert a string into an array
4.Trimming:
Remove whitespace


In JavaScript, a string is a sequence of characters used to represent text. Strings are one of the most commonly used data types and are immutable (cannot be changed after creation). Here's a detailed overview:

1. Creating Strings
Strings can be created in several ways:

Using String Literals
Enclosed in:
Single quotes (')
Double quotes (")
Backticks (`) for template literals
Examples:
javascript
Copy code
let single = 'Hello, world!';
let double = "Hello, world!";
let template = `Hello, ${'world'}!`; // Template literal
Using the String Constructor
Creates a string object (not recommended for general use).
Example:
javascript
Copy code
let objString = new String("Hello, world!");
2. String Characteristics
Immutable:

Strings cannot be changed once created. Any operation that alters a string creates a new string.
Example:
javascript
Copy code
let str = "Hello";
str[0] = "J"; // No effect
console.log(str); // "Hello"
Zero-Based Indexing:

Characters in a string are indexed starting from 0.
Example:
javascript
Copy code
let str = "Hello";
console.log(str[0]); // "H"
console.log(str[str.length - 1]); // "o"
3. Common String Methods
JavaScript provides many built-in methods for string manipulation:

Length
Get the length of a string:
javascript
Copy code
let str = "Hello";
console.log(str.length); // 5
Accessing Characters
Use bracket notation or charAt:
javascript
Copy code
let str = "Hello";
console.log(str[1]); // "e"
console.log(str.charAt(1)); // "e"
Case Conversion
Convert to uppercase or lowercase:
javascript
Copy code
let str = "Hello";
console.log(str.toUpperCase()); // "HELLO"
console.log(str.toLowerCase()); // "hello"
Searching and Extracting
Finding Substrings:

indexOf: Returns the index of the first occurrence of a substring.
lastIndexOf: Searches from the end.
javascript
Copy code
let str = "Hello, world!";
console.log(str.indexOf("world")); // 7
console.log(str.lastIndexOf("o")); // 8
Checking for Substring:

includes: Returns true or false.
startsWith and endsWith:
javascript
Copy code
let str = "JavaScript";
console.log(str.includes("Script")); // true
console.log(str.startsWith("Java")); // true
console.log(str.endsWith("Script")); // true
Extracting Substrings:

slice: Extracts part of a string.
substring: Similar to slice, but does not accept negative indices.
substr: Extracts a substring of a specified length (deprecated).
javascript
Copy code
let str = "Hello, world!";
console.log(str.slice(0, 5)); // "Hello"
console.log(str.substring(0, 5)); // "Hello"
console.log(str.substr(7, 5)); // "world"
Manipulating Strings
Concatenation:

Use + or concat:
javascript
Copy code
let str1 = "Hello";
let str2 = "world";
console.log(str1 + ", " + str2 + "!"); // "Hello, world!"
console.log(str1.concat(", ", str2, "!")); // "Hello, world!"
Replacing Content:

replace: Replaces the first match.
replaceAll: Replaces all matches.
javascript
Copy code
let str = "Hello, world!";
console.log(str.replace("world", "JavaScript")); // "Hello, JavaScript!"
console.log(str.replaceAll("o", "0")); // "Hell0, w0rld!"
Splitting:

Convert a string into an array:
javascript
Copy code
let str = "apple,banana,cherry";
console.log(str.split(",")); // ["apple", "banana", "cherry"]
Trimming:

Remove whitespace:
javascript
Copy code
let str = "  Hello, world!  ";
console.log(str.trim()); // "Hello, world!"
console.log(str.trimStart()); // "Hello, world!  "
console.log(str.trimEnd()); // "  Hello, world!"
4. Template Literals
Introduced in ES6, template literals allow embedding variables and expressions in strings.

Features:
Use backticks (`).
Support multi-line strings.
Embed variables and expressions using ${}.
Examples:
javascript
Copy code
let name = "Alice";
let age = 25;
console.log(`My name is ${name} and I am ${age} years old.`);

let multiLine = `This is
a multi-line
string.`;
console.log(multiLine);
5. Escape Sequences
Escape special characters using a backslash (\):

\': Single quote
\": Double quote
\\: Backslash
\n: New line
\t: Tab
Example:
javascript
Copy code
let str = "Hello\nWorld\t!";
console.log(str);
6. String Comparison
Strings are compared lexicographically, based on Unicode values:

javascript
Copy code
console.log("apple" < "banana"); // true
console.log("Apple" < "apple"); // true (case-sensitive)
7. String Iteration
Iterate over strings using a loop:

javascript
Copy code
let str = "Hello";
for (let char of str) {
  console.log(char);
}



