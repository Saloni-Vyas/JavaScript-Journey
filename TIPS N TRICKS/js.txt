TIPS AND TRICKS FOR JAVASCRIPT - 

 1. Use const and let instead of var
Why?
var is function-scoped and can lead to unexpected behavior due to hoisting.

let and const are block-scoped and more predictable.

// Bad
var name = "Alice";

// Good
const name = "Alice"; // Use const if value won't change
let age = 25;          // Use let if value may change

2. Destructuring Objects and Arrays
Why?
Cleaner and more readable code.

Easier extraction of properties or elements.

// Object Destructuring
const user = { name: "Alice", age: 25 };
const { name, age } = user;
console.log(name); // Alice

// Array Destructuring
const colors = ["red", "green", "blue"];
const [first, second] = colors;
console.log(second); // green

3. Optional Chaining (?.) and Nullish Coalescing (??)
Why?
Avoids errors when accessing deeply nested properties.

Provides default values only when null or undefined.

const user = { profile: null };

console.log(user.profile?.name); // undefined (no error)
console.log(user.profile?.name ?? "Guest"); // Guest

 4. Arrow Functions
Why?
Shorter syntax.

this is lexically scoped.

const greet = name => `Hello, ${name}!`;
console.log(greet("Alice")); // Hello, Alice!

 5. Short-circuit Evaluation
 let username = null;
let displayName = username || "Guest";
console.log(displayName);  // "Guest"

 6. Destructuring Assignment
 // Array Destructuring
let [a, b] = [10, 20];
console.log(a, b); // 10 20

// Object Destructuring
let person = { name: "Priyanshu", age: 22 };
let { name, age } = person;
console.log(name);  // "Priyanshu"

 7. Template Literals
let name = "Harsh";
let message = `Hello, ${name}!`;
console.log(message);  // "Hello, Harsh!"

 8. Optional Chaining 
 let user = { profile: { email: "a@example.com" } };
console.log(user.profile?.email);  // "a@example.com"
console.log(user.address?.city);   // undefined (no error)

 9. Nullish Coalescing
 let count = 0;
console.log(count ?? 100);  // 0
let result = null;
console.log(result ?? "Not Available");  // "Not Available"

 10. Spread Operator ...
 let arr1 = [1, 2];
let arr2 = [...arr1, 3, 4];
console.log(arr2); // [1, 2, 3, 4]

let obj1 = { a: 1 };
let obj2 = { ...obj1, b: 2 };
console.log(obj2); // { a: 1, b: 2 }

11. Arrow Functions Simplified
const add = (a, b) => a + b;
console.log(add(5, 3)); // 8


12. Convert String to Number Quickly
let str = "42";
console.log(+str);  // 42 (number)
